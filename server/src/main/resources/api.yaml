openapi: 3.0.0
info:
  title: Api Documentation
  description: Api Documentation
  version: 1.0.0

servers:
  - url: http://localhost:8080

paths:

  #
  # User api
  #
  /api/current-user:
    get:
      operationId: getCurrentUser
      responses:
        200:
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        #401:
        422:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationExceptionDto'
      tags:
        - user

  /api/users:
    get:
      operationId: getUsers
      responses:
        200:
          description: Operation successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        #401:
        #403:
      tags:
        - user

  /api/users/{id}:
    delete:
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      operationId: deleteUser
      responses:
        204:
          description: Operation successful
        #401:
        #403:
        #404:
      tags:
        - user

  #
  # Authentication api
  #
  /api/auth/login:
    post:
      operationId: login
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentialsDto'
      responses:
        200:
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResultDto'
      tags:
        - authentication

  /api/auth/register:
    post:
      operationId: register
      requestBody:
        description: UserDto
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        201:
          description: The new entity is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponseDto'
        422:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationExceptionDto'
      tags:
        - authentication

  #
  #  Event api
  #
  /api/events:
    post:
      operationId: createEvent
      requestBody:
        description: EventReducedDto
        required: true
        content:
          application/x-www-form-urlencoded;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/EventReducedDto'
      responses:
        201:
          description: The new entity is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponseDto'
        #401:
        #403:
        422:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationExceptionDto'
      tags:
        - event
    get:
      parameters:
        - name: title
          in: query
          schema:
            type: string
      operationId: searchEvent
      responses:
        200:
          description: Operation successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventSummaryDto'
      tags:
        - event

  /api/events/{id}:
    parameters:
      - $ref: '#/components/parameters/idPathParam'
    get:
      operationId: getEvent
      responses:
        200:
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDto'
        #401:
        #403:
        404:
          description: Not found
      tags:
        - event
    delete:
      operationId: deleteEvent
      responses:
        204:
          description: Operation successful
        #401:
        #403:
        #404:
      tags:
        - event
    put:
      operationId: updateEvent
      requestBody:
        description: EventReducedDto
        required: true
        content:
          application/x-www-form-urlencoded;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/EventReducedDto'
      responses:
        200:
          description: Operation successful
        #401:
        #403:
        #404:
      tags:
        - event


  /api/events/{id}/comments:
    parameters:
      - $ref: '#/components/parameters/idPathParam'
    post:
      operationId: createComment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        201:
          description: The new entity is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponseDto'
        #401:
        #403:
        #404:
        422:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationExceptionDto'
      tags:
        - event
    get:
      operationId: getComments
      responses:
        200:
          description: Operation successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentDto'
      tags:
        - event

  /api/events/{id}/comments/{commentId}:
    parameters:
      - $ref: '#/components/parameters/idPathParam'
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    delete:
      operationId: deleteComment
      responses:
        204:
          description: Operation successful
        #401:
        #403:
        #404:
      tags:
        - event

  /api/events/{id}/participants:
    parameters:
      - $ref: '#/components/parameters/idPathParam'
    get:
      operationId: getParticipants
      responses:
        200:
          description: Operation successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParticipantDto'
      tags:
        - event

  /api/events/{eventId}/{userId}/participants:
    parameters:
      - name: eventId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    post:
      operationId: addParticipant
      responses:
        201:
          description: The new entity is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponseDto'
        #401:
        #403:
        #404:
        422:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationExceptionDto'
      tags:
        - event
    delete:
      operationId: deleteParticipantbyUserId
      responses:
        204:
          description: Operation successful
        #401:
        #403:
        #404:
      tags:
        - event


  /api/events/participants/{id}:
    parameters:
      - $ref: '#/components/parameters/idPathParam'
    delete:
      operationId: deleteParticipant
      responses:
        204:
          description: Operation successful
        #401:
        #403:
        #404:
      tags:
        - event


components:
  parameters:
    idPathParam:
      name: id
      description: Identifier path parameter
      in: path
      required: true
      schema:
        type: integer
        format: int64

  schemas:

    Binary:
      type: string
      format: binary

    Byte:
      type: string
      format: byte

    IdResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64

    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
        bio:
          type: string
        role:
          type: string
      required:
        - email

    UserCredentialsDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password

    AuthResultDto:
      type: object
      properties:
        jwtToken:
          type: string

    EventReducedDto:
      type: object
      properties:
        title:
          type: string
        desc:
          type: string
        time:
          type: string
        wp:
          type: string
      required:
        - title
        - desc
        - time
        - wp

    EventSummaryDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        wp:
          type: string
      required:
        - title

    EventDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        creator:
          type: string
        title:
          type: string
        desc:
          type: string
        time:
          type: string
        wp:
          type: string


    CommentDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        creator:
          type: string
        createdDate:
          type: string
          format: date-time
        content:
          type: string
        event:
          $ref: '#/components/schemas/EventDto'

    ParticipantDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        creator:
          type: string
        userId:
          type: integer
          format: int64
        event:
          $ref: '#/components/schemas/EventDto'

    ValidationExceptionDto:
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationErrorDto'

    ValidationErrorDto:
      properties:
        messageKey:
          type: string
        params:
          type: object
          additionalProperties:
            type: string

    Authority:
      type: string
      enum:
        - VIEW_EVENT
        - CREATE_EVENT
        - DELETE_EVENT
        - MODIFY_EVENT
        - SEARCH_EVENT
        - WRITE_NOTE
        - DELETE_NOTE
        - VIEW_USER
        - DELETE_USER
